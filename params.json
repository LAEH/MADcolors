{"name":"Madcolors","tagline":"custom palettes. design and perception focused access & transformation","body":"##MADcolors.lua\r\n\r\n###Install\r\n\r\n```sh\r\nluarocks install https://raw.githubusercontent.com/LAEH/MADcolors/master/madcolors-scm-1.rockspec\r\n```\r\n\r\n###Load and run\r\n\r\n```lua\r\nth\r\n> mc = require 'madcolors'\r\n```\r\n\r\n### Setup\r\n```lua\r\n#!/usr/bin/env th\r\nlocal MADpalettes = require 'palettes'\r\nlocal col = require 'async.repl'.colorize\r\nfunction h1(text) print(col._black(text)) end\r\nfunction h2(text) print(col.red(text)) end\r\nfunction h3(text) print(col._cyan(text)) end\r\nlocal MADcolors = {\r\n   munsell = {}\r\n}\r\n```\r\n\r\n### rdm\r\n```lua\r\nfunction MADcolors.rdm(arrayPalette)\r\n   local arrayPalette = arrayPalette or MADpalettes.coolhex\r\n   local array = arrayPalette\r\n   for i = 1, #array-1 do\r\n      local  j = torch.random(i,#array)\r\n      array[i], array[j] = array[j], array[i]\r\n   end\r\n   -- print('Palette = ')\r\n   return array[1]\r\nend\r\nMADcolors.rdm()\r\n```\r\n\r\n\r\n### rdm\r\n\r\n```lua\r\nfunction MADpalettes.hsla(h,s,l,a)\r\n    local a = a or 1;\r\n    return 'hsla(' .. h .. ',' .. s .. '%,' .. l .. '%,' .. a .. ')'\r\nend\r\n```\r\n\r\n### Munsell by code\r\n\r\n```lua\r\nfunction MADcolors.munsell.byCode(opt)\r\n\r\n   ---- PALETTE\r\n   local codes = MADpalettes.munsell.codes\r\n   local RDMcode = codes[torch.random(1,#codes)]\r\n   local setPalette  = MADpalettes.munsell.bycode\r\n\r\n   ---- OPTIONS\r\n   opt = opt or {}\r\n   local code = opt.code or RDMcode\r\n   local step = opt.step or 4\r\n   local value = opt.value or 9\r\n   local chroma = opt.value or 50\r\n\r\n   ---- GET\r\n   local setHue = setPalette[code]\r\n   local setStep = setHue[4]\r\n   local setValue = setStep[9]\r\n   local nChroma = #setValue\r\n   local chromaIndex = math.ceil((chroma/100) * nChroma)\r\n   local color = setValue[chromaIndex]\r\n\r\n   ---- PRINT\r\n   h1([[\r\n      ------------------------\r\n      MADcolors.munsell.byCode ({\r\n         Value  =]].. step   ..[[,  (1-9)\r\n         Chroma =]].. code  ..[[,  (R-YR-Y-GY-G-BG-B-PB-P-RP)\r\n         degree =]].. value  ..[[,  (1-40)\r\n         rLeft  =]].. chroma  ..[[,  (1-100)\r\n      })\r\n      index Chroma = ]]..chromaIndex..[[/]]..nChroma..[[\r\n      hex = ]]..color\r\n   )\r\n\r\n   ---- RETURN\r\n   return color\r\nend\r\n\r\nMADcolors.munsell.byCode({\r\n   code = 'R',\r\n   step = 4,\r\n   value = 9,\r\n   chroma = 100\r\n})\r\n```\r\n\r\n### Munsell circular\r\n```lua\r\nfunction MADcolors.circular(opt)\r\n   opt = opt or {}\r\n   local n  = 40\r\n   local value = opt.value or torch.random(1,9)\r\n   local chroma = opt.chroma or torch.random(1,99)\r\n   local degree = opt.degree or torch.random(1,40)\r\n   local goLeft = opt.goLeft or torch.random(1,20)\r\n   local goRight = opt.goRight or torch.random(1,20)\r\n\r\n   ----hue\r\n   local idx = degree\r\n   if goRight~=0 then idx = idx + goRight end\r\n   if goLeft~=0 then idx = idx - goLeft end\r\n\r\n   ----list -> circle\r\n   if idx > n then idx = idx - n end\r\n   if idx < 0 then idx = n - idx end\r\n\r\n   ----light row\r\n   value = 10 - value\r\n   local valueRow = MADpalettes.munsell.flat[idx][value]\r\n\r\n   ----color\r\n   local nChroma = #valueRow\r\n   local chromaIndex = math.ceil((chroma/100)*nChroma)\r\n   local color = valueRow[chromaIndex]\r\n\r\n   h1([[\r\n      ------------------\r\n      MADcolors.circular ({\r\n         Value  =]].. value   ..[[,  (1-9)\r\n         Chroma =]].. chroma  ..[[,  (1-100)\r\n         degree =]].. degree  ..[[,  (1-40)\r\n         rLeft  =]].. goLeft  ..[[,  (1-20)\r\n         rRight =]].. goRight ..[[,  (1-20)\r\n      })\r\n      COLOR = ]]..color..[[\r\n   ]]\r\n   )\r\n\r\n   ---- RETURN\r\n   return color\r\n\r\nend\r\nMADcolors.circular()\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}